!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AI2	convolutional_layer.c	16;"	d	file:
ALL_CPPFLAGS	Makefile	/^ALL_CPPFLAGS :=$/;"	m
BattleRoyaleWithCheese	compare.c	/^void BattleRoyaleWithCheese(char *filename, char *weightfile)$/;"	f
CFLAGS	Makefile	/^CFLAGS =-I..\/.\/include$/;"	m
CPipe_cleanup	pipe_service.c	/^void CPipe_cleanup(CPipe *pipe) {$/;"	f
CPipe_init	pipe_service.c	/^int CPipe_init(CPipe *pipe) {$/;"	f
CUDNN	Makefile	/^CUDNN=1$/;"	m
DEBUG	Makefile	/^DEBUG=0$/;"	m
D_DBUS_IFACE	dbus.h	13;"	d
D_DBUS_NAME	dbus.h	11;"	d
D_DBUS_PATH	dbus.h	12;"	d
D_VDBUS_IFACE	dbus.c	10;"	d	file:
D_VDBUS_NAME	dbus.c	8;"	d	file:
D_VDBUS_PATH	dbus.c	9;"	d	file:
DeQueue	queue.c	/^int DeQueue(Queue* queue)$/;"	f
DelQueue	queue.c	/^void DelQueue(Queue* queue)$/;"	f
EXTRCFLAGS	Makefile	/^EXTRCFLAGS := -Wall -Wfatal-errors --shared -fPIC -Ofast$/;"	m
EnQueue	queue.c	/^void EnQueue(Queue* queue, int data)$/;"	f
FRAMES	demo.c	12;"	d	file:
GENCODE_FLAGS	Makefile	/^GENCODE_FLAGS := $(GENCODE_SM53) $(GENCODE_SM62)$/;"	m
GENCODE_SM53	Makefile	/^GENCODE_SM53 := -gencode arch=compute_53,code=sm_53$/;"	m
GENCODE_SM62	Makefile	/^GENCODE_SM62 := -gencode arch=compute_62,code=sm_62$/;"	m
GPU	Makefile	/^GPU=1$/;"	m
INCLUDES	Makefile	/^INCLUDES  := -I"..\/..\/..\/include"$/;"	m
InitQueue	queue.c	/^Queue* InitQueue(Queue *queue)$/;"	f
IsNull	queue.c	/^int IsNull(Queue* queue)$/;"	f
NUMCHARS	data.c	331;"	d	file:
NVCCFLAGS	Makefile	/^NVCCFLAGS := --shared$/;"	m
OBJS	Makefile	/^OBJS:= $(SRCS:.c=.o)$/;"	m
OPENCV	Makefile	/^OPENCV=1$/;"	m
PrintQueue	queue.c	/^void PrintQueue(Queue* queue)$/;"	f
SRCS	Makefile	/^SRCS:= $(wildcard *.c)$/;"	m
STB_IMAGE_IMPLEMENTATION	image.c	8;"	d	file:
STB_IMAGE_WRITE_IMPLEMENTATION	image.c	10;"	d	file:
SortMaster3000	compare.c	/^void SortMaster3000(char *filename, char *weightfile)$/;"	f
__PI_DBUS_H__	dbus.h	2;"	d
abs_mean	nightmare.c	/^float abs_mean(float *x, int n)$/;"	f
activate	activations.c	/^float activate(float x, ACTIVATION a)$/;"	f
activate_array	activations.c	/^void activate_array(float *x, const int n, const ACTIVATION a)$/;"	f
add_bias	convolutional_layer.c	/^void add_bias(float *output, float *biases, int batch, int n, int size)$/;"	f
add_pixel	image.c	/^void add_pixel(image m, int x, int y, int c, float val)$/;"	f
alphanum_to_int	utils.c	/^int alphanum_to_int(char c)$/;"	f
aquireFrameThread_0	base.c	/^static void aquireFrameThread_0(void *data)$/;"	f	file:
aquireFrameThread_1	base.c	/^static void aquireFrameThread_1(void *data)$/;"	f	file:
aquireFrameThread_2	base.c	/^static void aquireFrameThread_2(void *data)$/;"	f	file:
aquireFrameThread_3	base.c	/^static void aquireFrameThread_3(void *data)$/;"	f	file:
average	eye_c.c	/^void average(int argc, char *argv[])$/;"	f
avg	base.c	/^static float *avg;$/;"	v	file:
avg	demo.c	/^static float *avg;$/;"	v	file:
axpy_cpu	blas.c	/^void axpy_cpu(int N, float ALPHA, float *X, int INCX, float *Y, int INCY)$/;"	f
backward_activation_layer	activation_layer.c	/^void backward_activation_layer(layer l, network_state state)$/;"	f
backward_activation_layer_gpu	activation_layer.c	/^void backward_activation_layer_gpu(layer l, network_state state)$/;"	f
backward_avgpool_layer	avgpool_layer.c	/^void backward_avgpool_layer(const avgpool_layer l, network_state state)$/;"	f
backward_batchnorm_layer	batchnorm_layer.c	/^void backward_batchnorm_layer(const layer l, network_state state)$/;"	f
backward_batchnorm_layer_gpu	batchnorm_layer.c	/^void backward_batchnorm_layer_gpu(const layer l, network_state state)$/;"	f
backward_bias	convolutional_layer.c	/^void backward_bias(float *bias_updates, float *delta, int batch, int n, int size)$/;"	f
backward_connected_layer	connected_layer.c	/^void backward_connected_layer(connected_layer l, network_state state)$/;"	f
backward_connected_layer_gpu	connected_layer.c	/^void backward_connected_layer_gpu(connected_layer l, network_state state)$/;"	f
backward_convolutional_layer	convolutional_layer.c	/^void backward_convolutional_layer(convolutional_layer l, network_state state)$/;"	f
backward_cost_layer	cost_layer.c	/^void backward_cost_layer(const cost_layer l, network_state state)$/;"	f
backward_cost_layer_gpu	cost_layer.c	/^void backward_cost_layer_gpu(const cost_layer l, network_state state)$/;"	f
backward_crnn_layer	crnn_layer.c	/^void backward_crnn_layer(layer l, network_state state)$/;"	f
backward_crnn_layer_gpu	crnn_layer.c	/^void backward_crnn_layer_gpu(layer l, network_state state)$/;"	f
backward_crop_layer	crop_layer.c	/^void backward_crop_layer(const crop_layer l, network_state state){}$/;"	f
backward_crop_layer_gpu	crop_layer.c	/^void backward_crop_layer_gpu(const crop_layer l, network_state state){}$/;"	f
backward_deconvolutional_layer	deconvolutional_layer.c	/^void backward_deconvolutional_layer(deconvolutional_layer l, network_state state)$/;"	f
backward_detection_layer	detection_layer.c	/^void backward_detection_layer(const detection_layer l, network_state state)$/;"	f
backward_detection_layer_gpu	detection_layer.c	/^void backward_detection_layer_gpu(detection_layer l, network_state state)$/;"	f
backward_dropout_layer	dropout_layer.c	/^void backward_dropout_layer(dropout_layer l, network_state state)$/;"	f
backward_gru_layer	gru_layer.c	/^void backward_gru_layer(layer l, network_state state)$/;"	f
backward_gru_layer_gpu	gru_layer.c	/^void backward_gru_layer_gpu(layer l, network_state state)$/;"	f
backward_local_layer	local_layer.c	/^void backward_local_layer(local_layer l, network_state state)$/;"	f
backward_local_layer_gpu	local_layer.c	/^void backward_local_layer_gpu(local_layer l, network_state state)$/;"	f
backward_maxpool_layer	maxpool_layer.c	/^void backward_maxpool_layer(const maxpool_layer l, network_state state)$/;"	f
backward_network	network.c	/^void backward_network(network net, network_state state)$/;"	f
backward_normalization_layer	normalization_layer.c	/^void backward_normalization_layer(const layer layer, network_state state)$/;"	f
backward_normalization_layer_gpu	normalization_layer.c	/^void backward_normalization_layer_gpu(const layer layer, network_state state)$/;"	f
backward_region_layer	region_layer.c	/^void backward_region_layer(const layer l, network_state state)$/;"	f
backward_region_layer_gpu	region_layer.c	/^void backward_region_layer_gpu(layer l, network_state state)$/;"	f
backward_reorg_layer	reorg_layer.c	/^void backward_reorg_layer(const layer l, network_state state)$/;"	f
backward_reorg_layer_gpu	reorg_layer.c	/^void backward_reorg_layer_gpu(layer l, network_state state)$/;"	f
backward_rnn_layer	rnn_layer.c	/^void backward_rnn_layer(layer l, network_state state)$/;"	f
backward_rnn_layer_gpu	rnn_layer.c	/^void backward_rnn_layer_gpu(layer l, network_state state)$/;"	f
backward_route_layer	route_layer.c	/^void backward_route_layer(const route_layer l, network_state state)$/;"	f
backward_route_layer_gpu	route_layer.c	/^void backward_route_layer_gpu(const route_layer l, network_state state)$/;"	f
backward_scale_cpu	batchnorm_layer.c	/^void backward_scale_cpu(float *x_norm, float *delta, int batch, int n, int size, float *scale_updates)$/;"	f
backward_shortcut_layer	shortcut_layer.c	/^void backward_shortcut_layer(const layer l, network_state state)$/;"	f
backward_shortcut_layer_gpu	shortcut_layer.c	/^void backward_shortcut_layer_gpu(const layer l, network_state state)$/;"	f
backward_softmax_layer	softmax_layer.c	/^void backward_softmax_layer(const softmax_layer l, network_state state)$/;"	f
backward_softmax_layer_gpu	softmax_layer.c	/^void backward_softmax_layer_gpu(const softmax_layer layer, network_state state)$/;"	f
base	base.c	/^int base(char *cfgfile, char *weightfile, float thresh, int cam_index, const char *filename, char **names, int classes, int frame_skip, char *prefix, float hier_thresh, float thresh_hand)$/;"	f
base	base.c	/^void base(char *cfgfile, char *weightfile, float thresh, int cam_index, const char *filename, char **names, int classes, int frame_skip, char *prefix, float hier_thresh)$/;"	f
basecfg	utils.c	/^char *basecfg(char *cfgfile)$/;"	f
batch	parser.c	/^    int batch;$/;"	m	struct:size_params	file:
bbox_comparator	compare.c	/^int bbox_comparator(const void *a, const void *b)$/;"	f
bbox_fight	compare.c	/^void bbox_fight(network net, sortable_bbox *a, sortable_bbox *b, int classes, int class)$/;"	f
bbox_update	compare.c	/^void bbox_update(sortable_bbox *a, sortable_bbox *b, int class, int result)$/;"	f
best_3d_shift	image.c	/^int best_3d_shift(image a, image b, int min, int max)$/;"	f
best_3d_shift_r	image.c	/^int best_3d_shift_r(image a, image b, int min, int max)$/;"	f
bilinear_interpolate	image.c	/^float bilinear_interpolate(image im, float x, float y, int c)$/;"	f
binarize_cpu	convolutional_layer.c	/^void binarize_cpu(float *input, int n, float *binary)$/;"	f
binarize_image	image.c	/^image binarize_image(image im)$/;"	f
binarize_input	convolutional_layer.c	/^void binarize_input(float *input, int n, int size, float *binary)$/;"	f
binarize_weights	convolutional_layer.c	/^void binarize_weights(float *weights, int n, int size, float *binary)$/;"	f
blas_handle	cuda.c	/^cublasHandle_t blas_handle()$/;"	f
blend_image	image.c	/^image blend_image(image fore, image back, float alpha)$/;"	f
board_to_string	go.c	/^void board_to_string(char *s, float *board)$/;"	f
border_image	image.c	/^image border_image(image a, int border)$/;"	f
box_intersection	box.c	/^float box_intersection(box a, box b)$/;"	f
box_iou	box.c	/^float box_iou(box a, box b)$/;"	f
box_rmse	box.c	/^float box_rmse(box a, box b)$/;"	f
box_union	box.c	/^float box_union(box a, box b)$/;"	f
boxes	demo.c	/^static box *boxes;$/;"	v	file:
boxes	robot.c	/^static box *boxes;$/;"	v	file:
boxes	robot1.c	/^static box *boxes;$/;"	v	file:
c	parser.c	/^    int c;$/;"	m	struct:size_params	file:
calculate_liberties	go.c	/^int *calculate_liberties(float *board)$/;"	f
calculate_loss	nightmare.c	/^void calculate_loss(float *output, float *delta, int n, float thresh)$/;"	f
camera_without_replay	dbus.c	/^void camera_without_replay(DBusConnection * connection, char *mesg) {$/;"	f
cap	demo.c	/^static CvCapture * cap;$/;"	v	file:
change_leaves	tree.c	/^void change_leaves(tree *t, char *leaf_list)$/;"	f
check_error	cuda.c	/^void check_error(cudaError_t status)$/;"	f
class	box.c	/^    int class;$/;"	m	struct:__anon3	file:
class	compare.c	/^    int class;$/;"	m	struct:__anon2	file:
classes	compare.c	/^    int classes;$/;"	m	struct:__anon2	file:
coco_classes	coco.c	/^char *coco_classes[] = {"person","bicycle","car","motorcycle","airplane","bus","train","truck","boat","traffic light","fire hydrant","stop sign","parking meter","bench","bird","cat","dog","horse","sheep","cow","elephant","bear","zebra","giraffe","backpack","umbrella","handbag","tie","suitcase","frisbee","skis","snowboard","sports ball","kite","baseball bat","baseball glove","skateboard","surfboard","tennis racket","bottle","wine glass","cup","fork","knife","spoon","bowl","banana","apple","sandwich","orange","broccoli","carrot","hot dog","pizza","donut","cake","chair","couch","potted plant","bed","dining table","toilet","tv","laptop","mouse","remote","keyboard","cell phone","microwave","oven","toaster","sink","refrigerator","book","clock","vase","scissors","teddy bear","hair drier","toothbrush"};$/;"	v
coco_ids	coco.c	/^int coco_ids[] = {1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,70,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,90};$/;"	v
coco_ids	detector.c	/^static int coco_ids[] = {1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,70,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,90};$/;"	v	file:
col2im_add_pixel	col2im.c	/^void col2im_add_pixel(float *im, int height, int width, int channels,$/;"	f
col2im_cpu	col2im.c	/^void col2im_cpu(float* data_col,$/;"	f
collapse_image_layers	image.c	/^image collapse_image_layers(image source, int border)$/;"	f
collapse_images_horz	image.c	/^image collapse_images_horz(image *ims, int n)$/;"	f
collapse_images_vert	image.c	/^image collapse_images_vert(image *ims, int n)$/;"	f
colors	image.c	/^float colors[6][3] = { {1,0,1}, {0,0,1},{0,1,1},{0,1,0},{1,1,0},{1,0,0} };$/;"	v
compare_networks	network.c	/^void compare_networks(network n1, network n2, data test)$/;"	f
composite_3d	image.c	/^void composite_3d(char *f1, char *f2, char *out, int delta)$/;"	f
composite_image	image.c	/^void composite_image(image source, image dest, int dx, int dy)$/;"	f
concat_data	data.c	/^data concat_data(data d1, data d2)$/;"	f
concat_datas	data.c	/^data concat_datas(data *d, int n)$/;"	f
concat_matrix	data.c	/^matrix concat_matrix(matrix m1, matrix m2)$/;"	f
connect_dbus	dbus.c	/^DBusConnection * connect_dbus(){$/;"	f
connection	base.c	/^DBusConnection * connection;$/;"	v
connection	robot.c	/^DBusConnection * connection;$/;"	v
connection	robot1.c	/^DBusConnection * connection;$/;"	v
const_cpu	blas.c	/^void const_cpu(int N, float ALPHA, float *X, int INCX)$/;"	f
constrain	utils.c	/^float constrain(float min, float max, float a)$/;"	f
constrain_image	image.c	/^void constrain_image(image im)$/;"	f
constrain_int	utils.c	/^int constrain_int(int a, int min, int max)$/;"	f
convert_detections	eye.c	/^void convert_detections(float *predictions, int classes, int num, int square, int side, int w, int h, float thresh, float **probs, box *boxes, int only_objectness)$/;"	f
convolutional_out_height	convolutional_layer.c	/^int convolutional_out_height(convolutional_layer l)$/;"	f
convolutional_out_width	convolutional_layer.c	/^int convolutional_out_width(convolutional_layer l)$/;"	f
copy_cpu	blas.c	/^void copy_cpu(int N, float *X, int INCX, float *Y, int INCY)$/;"	f
copy_image	image.c	/^image copy_image(image p)$/;"	f
copy_string	utils.c	/^char *copy_string(char *s)$/;"	f
correct_boxes	data.c	/^void correct_boxes(box_label *boxes, int n, float dx, float dy, float sx, float sy, int flip)$/;"	f
count_fields	utils.c	/^int count_fields(char *line)$/;"	f
create_pipe	pipe_service.c	/^CPipe * create_pipe() {$/;"	f
crop_image	image.c	/^image crop_image(image im, int dx, int dy, int w, int h)$/;"	f
csv_to_matrix	matrix.c	/^matrix csv_to_matrix(char *filename)$/;"	f
cuda_char_free	cuda.c	/^void cuda_char_free(char *x_gpu)$/;"	f
cuda_compare	cuda.c	/^float cuda_compare(float *x_gpu, float *x, size_t n, char *s)$/;"	f
cuda_free	cuda.c	/^void cuda_free(float *x_gpu)$/;"	f
cuda_get_device	cuda.c	/^int cuda_get_device()$/;"	f
cuda_gridsize	cuda.c	/^dim3 cuda_gridsize(size_t n){$/;"	f
cuda_int_free	cuda.c	/^void cuda_int_free(int *x_gpu)$/;"	f
cuda_make_array	cuda.c	/^float *cuda_make_array(float *x, size_t n)$/;"	f
cuda_make_char_array	cuda.c	/^char *cuda_make_char_array(size_t n)$/;"	f
cuda_make_float_array	cuda.c	/^float *cuda_make_float_array(size_t n)$/;"	f
cuda_make_int_array	cuda.c	/^int *cuda_make_int_array(size_t n)$/;"	f
cuda_pull_array	cuda.c	/^void cuda_pull_array(float *x_gpu, float *x, size_t n)$/;"	f
cuda_pull_char_array	cuda.c	/^void cuda_pull_char_array(char *x_gpu, char *x, size_t n)$/;"	f
cuda_pull_int_array	cuda.c	/^void cuda_pull_int_array(int *x_gpu, int *x, size_t n)$/;"	f
cuda_push_array	cuda.c	/^void cuda_push_array(float *x_gpu, float *x, size_t n)$/;"	f
cuda_push_char_array	cuda.c	/^void cuda_push_char_array(char *x_gpu, char *x, size_t n)$/;"	f
cuda_push_int_array	cuda.c	/^void cuda_push_int_array(int *x_gpu, int *x, size_t n)$/;"	f
cuda_random	cuda.c	/^void cuda_random(float *x_gpu, size_t n)$/;"	f
cuda_set_device	cuda.c	/^void cuda_set_device(int n)$/;"	f
cudnn_convolutional_setup	convolutional_layer.c	/^void cudnn_convolutional_setup(layer *l)$/;"	f
cudnn_handle	cuda.c	/^cudnnHandle_t cudnn_handle()$/;"	f
current_class	compare.c	/^int current_class = 0;$/;"	v
cvText	base.c	/^void cvText(IplImage* img, const char* text, int x, int y)  $/;"	f
data	go.c	/^    char **data;$/;"	m	struct:__anon5	file:
decode_box	box.c	/^box decode_box(box b, box anchor)$/;"	f
deconvolutional_out_height	deconvolutional_layer.c	/^int deconvolutional_out_height(deconvolutional_layer l)$/;"	f
deconvolutional_out_size	deconvolutional_layer.c	/^int deconvolutional_out_size(deconvolutional_layer l)$/;"	f
deconvolutional_out_width	deconvolutional_layer.c	/^int deconvolutional_out_width(deconvolutional_layer l)$/;"	f
del_arg	utils.c	/^void del_arg(int argc, char **argv, int index)$/;"	f
delta_region_box	region_layer.c	/^float delta_region_box(box truth, float *x, float *biases, int n, int index, int i, int j, int w, int h, float *delta, float scale)$/;"	f
delta_region_class	region_layer.c	/^void delta_region_class(float *output, float *delta, int index, int class, int classes, tree *hier, float scale, float *avg_cat)$/;"	f
demo	demo.c	/^void demo(char *cfgfile, char *weightfile, float thresh, int cam_index, const char *filename, char **names, int classes, int frame_skip, char *prefix, float hier_thresh, float thresh_hand)$/;"	f
demo_alphabet	demo.c	/^static image **demo_alphabet;$/;"	v	file:
demo_art	art.c	/^void demo_art(char *cfgfile, char *weightfile, int cam_index)$/;"	f
demo_classes	demo.c	/^static int demo_classes;$/;"	v	file:
demo_classifier	classifier.c	/^void demo_classifier(char *datacfg, char *cfgfile, char *weightfile, int cam_index, const char *filename)$/;"	f
demo_hier_thresh	demo.c	/^static float demo_hier_thresh = .5;$/;"	v	file:
demo_index	demo.c	/^static int demo_index = 0;$/;"	v	file:
demo_names	demo.c	/^static char **demo_names;$/;"	v	file:
demo_thresh	demo.c	/^static float demo_thresh = 0;$/;"	v	file:
demo_thresh_hand	demo.c	/^static float demo_thresh_hand = 0.1;$/;"	v	file:
denormalize_connected_layer	connected_layer.c	/^void denormalize_connected_layer(layer l)$/;"	f
denormalize_convolutional_layer	convolutional_layer.c	/^void denormalize_convolutional_layer(convolutional_layer l)$/;"	f
denormalize_net	eye_c.c	/^void denormalize_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f
derivative	box.c	/^dbox derivative(box a, box b)$/;"	f
destroy_pipe	pipe_service.c	/^void destroy_pipe(CPipe *pipe) {$/;"	f
det	demo.c	/^static image det  ;$/;"	v	file:
det_s	demo.c	/^static image det_s;$/;"	v	file:
detect_in_thread	demo.c	/^void *detect_in_thread(void *ptr)$/;"	f
detect_thread	base.c	/^static void detect_thread(void *data)$/;"	f	file:
dice_labels	dice.c	/^char *dice_labels[] = {"face1","face2","face3","face4","face5","face6"};$/;"	v
dintersect	box.c	/^dbox dintersect(box a, box b)$/;"	f
diou	box.c	/^dbox diou(box a, box b)$/;"	f
disp	demo.c	/^static image disp = {0};$/;"	v	file:
dist_array	utils.c	/^float dist_array(float *a, float *b, int n, int sub)$/;"	f
distort_image	image.c	/^void distort_image(image im, float hue, float sat, float val)$/;"	f
do_nms	box.c	/^void do_nms(box *boxes, float **probs, int total, int classes, float thresh)$/;"	f
do_nms_obj	box.c	/^void do_nms_obj(box *boxes, float **probs, int total, int classes, float thresh)$/;"	f
do_nms_sort	box.c	/^void do_nms_sort(box *boxes, float **probs, int total, int classes, float thresh)$/;"	f
dot_cpu	blas.c	/^float dot_cpu(int N, float *X, int INCX, float *Y, int INCY)$/;"	f
draw_bbox	image.c	/^void draw_bbox(image a, box bbox, int w, float r, float g, float b)$/;"	f
draw_box	image.c	/^void draw_box(image a, int x1, int y1, int x2, int y2, float r, float g, float b)$/;"	f
draw_box_width	image.c	/^void draw_box_width(image a, int x1, int y1, int x2, int y2, int w, float r, float g, float b)$/;"	f
draw_detections	image.c	/^void draw_detections(image im, int num, float thresh, box *boxes, float **probs, char **names, image **alphabet, int classes, float thresh_hand)$/;"	f
draw_detections_rect	base.c	/^void draw_detections_rect(peye mdata, image a, box *rbox)$/;"	f
draw_label	image.c	/^void draw_label(image a, int r, int c, image label, const float *rgb)$/;"	f
draw_vText	robot.c	/^int draw_vText(IplImage* img, const char* text, int x, int y)$/;"	f
draw_vText	robot1.c	/^int draw_vText(IplImage* img, const char* text, int x, int y)$/;"	f
dunion	box.c	/^dbox dunion(box a, box b)$/;"	f
elo	compare.c	/^    float elo;$/;"	m	struct:__anon2	file:
elo_comparator	compare.c	/^int elo_comparator(const void*a, const void *b)$/;"	f
elos	compare.c	/^    float *elos;$/;"	m	struct:__anon2	file:
embed_image	image.c	/^void embed_image(image source, image dest, int dx, int dy)$/;"	f
encode_box	box.c	/^box encode_box(box b, box anchor)$/;"	f
engine_go	go.c	/^void engine_go(char *filename, char *weightfile, int multi)$/;"	f
errno_exit	base.c	/^static void errno_exit (const char *s)$/;"	f	file:
error	utils.c	/^void error(const char *s)$/;"	f
eval_cifar_csv	cifar.c	/^void eval_cifar_csv()$/;"	f
exposure_image	image.c	/^void exposure_image(image im, float sat)$/;"	f
extract_cifar	cifar.c	/^void extract_cifar()$/;"	f
extract_voxel	voxel.c	/^void extract_voxel(char *lfile, char *rfile, char *prefix)$/;"	f
eye	eye.c	/^int eye(int argc, char **argv)$/;"	f
eye_c	eye_c.c	/^int eye_c(int argc, char **argv)$/;"	f
fetch_detections_result	base.c	/^void fetch_detections_result(peye mdata, int num, float thresh, box *boxes, float **probs, char **names, int classes, int cam_idx, float thresh_hand)$/;"	f
fetch_in_thread	demo.c	/^void *fetch_in_thread(void *ptr)$/;"	f
fgetgo	go.c	/^char *fgetgo(FILE *fp)$/;"	f
fgetl	utils.c	/^char *fgetl(FILE *fp)$/;"	f
file_error	utils.c	/^void file_error(char *s)$/;"	f
filename	compare.c	/^    char *filename;$/;"	m	struct:__anon2	file:
fill_cpu	blas.c	/^void fill_cpu(int N, float ALPHA, float *X, int INCX)$/;"	f
fill_hierarchy	data.c	/^void fill_hierarchy(float *truth, int k, tree *hierarchy)$/;"	f
fill_truth	data.c	/^void fill_truth(char *path, char **labels, int k, float *truth)$/;"	f
fill_truth_captcha	data.c	/^void fill_truth_captcha(char *path, int n, float *truth)$/;"	f
fill_truth_detection	data.c	/^void fill_truth_detection(char *path, int num_boxes, float *truth, int classes, int flip, float dx, float dy, float sx, float sy)$/;"	f
fill_truth_region	data.c	/^void fill_truth_region(char *path, float *truth, int classes, int num_boxes, int flip, float dx, float dy, float sx, float sy)$/;"	f
fill_truth_swag	data.c	/^void fill_truth_swag(char *path, float *truth, int classes, int flip, float dx, float dy, float sx, float sy)$/;"	f
find_arg	utils.c	/^int find_arg(int argc, char* argv[], char *arg)$/;"	f
find_char_arg	utils.c	/^char *find_char_arg(int argc, char **argv, char *arg, char *def)$/;"	f
find_float_arg	utils.c	/^float find_float_arg(int argc, char **argv, char *arg, float def)$/;"	f
find_int_arg	utils.c	/^int find_int_arg(int argc, char **argv, char *arg, int def)$/;"	f
find_replace	utils.c	/^void find_replace(char *str, char *orig, char *rep, char *output)$/;"	f
find_replace_paths	data.c	/^char **find_replace_paths(char **paths, int n, char *find, char *replace)$/;"	f
fix_data_captcha	captcha.c	/^void fix_data_captcha(data d, int mask)$/;"	f
flatten	blas.c	/^void flatten(float *x, int size, int layers, int batch, int forward)$/;"	f
flip_board	go.c	/^void flip_board(float *board)$/;"	f
flip_image	image.c	/^void flip_image(image a)$/;"	f
float_abs_compare	cost_layer.c	/^int float_abs_compare (const void * a, const void * b)$/;"	f
float_pair	rnn.c	/^} float_pair;$/;"	t	typeref:struct:__anon6	file:
float_pair	rnn_vid.c	/^} float_pair;$/;"	t	typeref:struct:__anon4	file:
float_to_box	box.c	/^box float_to_box(float *f)$/;"	f
float_to_image	image.c	/^image float_to_image(int w, int h, int c, float *data)$/;"	f
forward_activation_layer	activation_layer.c	/^void forward_activation_layer(layer l, network_state state)$/;"	f
forward_activation_layer_gpu	activation_layer.c	/^void forward_activation_layer_gpu(layer l, network_state state)$/;"	f
forward_avgpool_layer	avgpool_layer.c	/^void forward_avgpool_layer(const avgpool_layer l, network_state state)$/;"	f
forward_batchnorm_layer	batchnorm_layer.c	/^void forward_batchnorm_layer(layer l, network_state state)$/;"	f
forward_batchnorm_layer_gpu	batchnorm_layer.c	/^void forward_batchnorm_layer_gpu(layer l, network_state state)$/;"	f
forward_connected_layer	connected_layer.c	/^void forward_connected_layer(connected_layer l, network_state state)$/;"	f
forward_connected_layer_gpu	connected_layer.c	/^void forward_connected_layer_gpu(connected_layer l, network_state state)$/;"	f
forward_convolutional_layer	convolutional_layer.c	/^void forward_convolutional_layer(convolutional_layer l, network_state state)$/;"	f
forward_cost_layer	cost_layer.c	/^void forward_cost_layer(cost_layer l, network_state state)$/;"	f
forward_cost_layer_gpu	cost_layer.c	/^void forward_cost_layer_gpu(cost_layer l, network_state state)$/;"	f
forward_crnn_layer	crnn_layer.c	/^void forward_crnn_layer(layer l, network_state state)$/;"	f
forward_crnn_layer_gpu	crnn_layer.c	/^void forward_crnn_layer_gpu(layer l, network_state state)$/;"	f
forward_crop_layer	crop_layer.c	/^void forward_crop_layer(const crop_layer l, network_state state)$/;"	f
forward_deconvolutional_layer	deconvolutional_layer.c	/^void forward_deconvolutional_layer(const deconvolutional_layer l, network_state state)$/;"	f
forward_detection_layer	detection_layer.c	/^void forward_detection_layer(const detection_layer l, network_state state)$/;"	f
forward_detection_layer_gpu	detection_layer.c	/^void forward_detection_layer_gpu(const detection_layer l, network_state state)$/;"	f
forward_dropout_layer	dropout_layer.c	/^void forward_dropout_layer(dropout_layer l, network_state state)$/;"	f
forward_gru_layer	gru_layer.c	/^void forward_gru_layer(layer l, network_state state)$/;"	f
forward_gru_layer_gpu	gru_layer.c	/^void forward_gru_layer_gpu(layer l, network_state state)$/;"	f
forward_local_layer	local_layer.c	/^void forward_local_layer(const local_layer l, network_state state)$/;"	f
forward_local_layer_gpu	local_layer.c	/^void forward_local_layer_gpu(const local_layer l, network_state state)$/;"	f
forward_maxpool_layer	maxpool_layer.c	/^void forward_maxpool_layer(const maxpool_layer l, network_state state)$/;"	f
forward_network	network.c	/^void forward_network(network net, network_state state)$/;"	f
forward_normalization_layer	normalization_layer.c	/^void forward_normalization_layer(const layer layer, network_state state)$/;"	f
forward_normalization_layer_gpu	normalization_layer.c	/^void forward_normalization_layer_gpu(const layer layer, network_state state)$/;"	f
forward_region_layer	region_layer.c	/^void forward_region_layer(const layer l, network_state state)$/;"	f
forward_region_layer_gpu	region_layer.c	/^void forward_region_layer_gpu(const layer l, network_state state)$/;"	f
forward_reorg_layer	reorg_layer.c	/^void forward_reorg_layer(const layer l, network_state state)$/;"	f
forward_reorg_layer_gpu	reorg_layer.c	/^void forward_reorg_layer_gpu(layer l, network_state state)$/;"	f
forward_rnn_layer	rnn_layer.c	/^void forward_rnn_layer(layer l, network_state state)$/;"	f
forward_rnn_layer_gpu	rnn_layer.c	/^void forward_rnn_layer_gpu(layer l, network_state state)$/;"	f
forward_route_layer	route_layer.c	/^void forward_route_layer(const route_layer l, network_state state)$/;"	f
forward_route_layer_gpu	route_layer.c	/^void forward_route_layer_gpu(const route_layer l, network_state state)$/;"	f
forward_shortcut_layer	shortcut_layer.c	/^void forward_shortcut_layer(const layer l, network_state state)$/;"	f
forward_shortcut_layer_gpu	shortcut_layer.c	/^void forward_shortcut_layer_gpu(const layer l, network_state state)$/;"	f
forward_softmax_layer	softmax_layer.c	/^void forward_softmax_layer(const softmax_layer l, network_state state)$/;"	f
forward_softmax_layer_gpu	softmax_layer.c	/^void forward_softmax_layer_gpu(const softmax_layer l, network_state state)$/;"	f
fps	demo.c	/^static float fps = 0;$/;"	v	file:
free_data	data.c	/^void free_data(data d)$/;"	f
free_image	image.c	/^void free_image(image m)$/;"	f
free_layer	layer.c	/^void free_layer(layer l)$/;"	f
free_list	list.c	/^void free_list(list *l)$/;"	f
free_list_contents	list.c	/^void free_list_contents(list *l)$/;"	f
free_matrix	matrix.c	/^void free_matrix(matrix m)$/;"	f
free_network	network.c	/^void free_network(network net)$/;"	f
free_node	list.c	/^void free_node(node *n)$/;"	f
free_ptrs	utils.c	/^void free_ptrs(void **ptrs, int n)$/;"	f
free_section	parser.c	/^void free_section(section *s)$/;"	f
gemm	gemm.c	/^void gemm(int TA, int TB, int M, int N, int K, float ALPHA, $/;"	f
gemm_bin	gemm.c	/^void gemm_bin(int M, int N, int K, float ALPHA, $/;"	f
gemm_cpu	gemm.c	/^void gemm_cpu(int TA, int TB, int M, int N, int K, float ALPHA, $/;"	f
gemm_gpu	gemm.c	/^void gemm_gpu(int TA, int TB, int M, int N, int K, float ALPHA, $/;"	f
gemm_nn	gemm.c	/^void gemm_nn(int M, int N, int K, float ALPHA, $/;"	f
gemm_nt	gemm.c	/^void gemm_nt(int M, int N, int K, float ALPHA, $/;"	f
gemm_ongpu	gemm.c	/^void gemm_ongpu(int TA, int TB, int M, int N, int K, float ALPHA, $/;"	f
gemm_tn	gemm.c	/^void gemm_tn(int M, int N, int K, float ALPHA, $/;"	f
gemm_tt	gemm.c	/^void gemm_tt(int M, int N, int K, float ALPHA, $/;"	f
generate_move	go.c	/^int generate_move(network net, int player, float *board, int multi, float thresh, float temp, char *ko, int print)$/;"	f
generate_vid_rnn	rnn_vid.c	/^void generate_vid_rnn(char *cfgfile, char *weightfile)$/;"	f
getBufferIdx	base.c	/^int getBufferIdx(peye mdata, int *index)$/;"	f
get_activation	activations.c	/^ACTIVATION get_activation(char *s)$/;"	f
get_activation_string	activations.c	/^char *get_activation_string(ACTIVATION a)$/;"	f
get_buffer	base.c	/^static int get_buffer(peye mdata, struct v4l2_buffer *qbuf, int cam_idx)$/;"	f	file:
get_coco_image_id	coco.c	/^int get_coco_image_id(char *filename)$/;"	f
get_coco_image_id	detector.c	/^static int get_coco_image_id(char *filename)$/;"	f	file:
get_color	image.c	/^float get_color(int c, int x, int max)$/;"	f
get_convolutional_delta	convolutional_layer.c	/^image get_convolutional_delta(convolutional_layer l)$/;"	f
get_convolutional_image	convolutional_layer.c	/^image get_convolutional_image(convolutional_layer l)$/;"	f
get_convolutional_weight	convolutional_layer.c	/^image get_convolutional_weight(convolutional_layer l, int i)$/;"	f
get_cost_string	cost_layer.c	/^char *get_cost_string(COST_TYPE a)$/;"	f
get_cost_type	cost_layer.c	/^COST_TYPE get_cost_type(char *s)$/;"	f
get_crop_image	crop_layer.c	/^image get_crop_image(crop_layer l)$/;"	f
get_current_batch	network.c	/^int get_current_batch(network net)$/;"	f
get_current_rate	network.c	/^float get_current_rate(network net)$/;"	f
get_data_part	data.c	/^data get_data_part(data d, int part, int total)$/;"	f
get_deconvolutional_delta	deconvolutional_layer.c	/^image get_deconvolutional_delta(deconvolutional_layer l)$/;"	f
get_deconvolutional_image	deconvolutional_layer.c	/^image get_deconvolutional_image(deconvolutional_layer l)$/;"	f
get_detection_boxes	detection_layer.c	/^void get_detection_boxes(layer l, int w, int h, float thresh, float **probs, box *boxes, int only_objectness)$/;"	f
get_detections_result	robot.c	/^int get_detections_result(pmnet mdata, IplImage *showImg)$/;"	f
get_detections_result	robot1.c	/^int get_detections_result(pmnet mdata, IplImage *showImg)$/;"	f
get_hierarchy_probability	tree.c	/^float get_hierarchy_probability(float *x, tree *hier, int c)$/;"	f
get_image_from_stream	image.c	/^image get_image_from_stream(CvCapture *cap)$/;"	f
get_image_layer	image.c	/^image get_image_layer(image m, int l)$/;"	f
get_label	image.c	/^image get_label(image **characters, char *string, int size)$/;"	f
get_labels	data.c	/^char **get_labels(char *filename)$/;"	f
get_layer_string	network.c	/^char *get_layer_string(LAYER_TYPE a)$/;"	f
get_maxpool_delta	maxpool_layer.c	/^image get_maxpool_delta(maxpool_layer l)$/;"	f
get_maxpool_image	maxpool_layer.c	/^image get_maxpool_image(maxpool_layer l)$/;"	f
get_network_cost	network.c	/^float get_network_cost(network net)$/;"	f
get_network_detection_layer	network.c	/^detection_layer get_network_detection_layer(network net)$/;"	f
get_network_image	network.c	/^image get_network_image(network net)$/;"	f
get_network_image_layer	network.c	/^image get_network_image_layer(network net, int i)$/;"	f
get_network_input_size	network.c	/^int get_network_input_size(network net)$/;"	f
get_network_output	network.c	/^float *get_network_output(network net)$/;"	f
get_network_output_size	network.c	/^int get_network_output_size(network net)$/;"	f
get_next_batch	data.c	/^void get_next_batch(data d, int n, int offset, float *X, float *y)$/;"	f
get_paths	data.c	/^list *get_paths(char *filename)$/;"	f
get_pixel	image.c	/^float get_pixel(image m, int x, int y, int c)$/;"	f
get_pixel_extend	image.c	/^float get_pixel_extend(image m, int x, int y, int c)$/;"	f
get_policy	parser.c	/^learning_rate_policy get_policy(char *s)$/;"	f
get_predicted_class_network	network.c	/^int get_predicted_class_network(network net)$/;"	f
get_random_batch	data.c	/^void get_random_batch(data d, int n, float *X, float *y)$/;"	f
get_random_data	data.c	/^data get_random_data(data d, int num)$/;"	f
get_random_paths	data.c	/^char **get_random_paths(char **paths, int n, int m)$/;"	f
get_region_box	region_layer.c	/^box get_region_box(float *x, float *biases, int n, int index, int i, int j, int w, int h)$/;"	f
get_region_boxes	region_layer.c	/^void get_region_boxes(layer l, int w, int h, float thresh, float **probs, box *boxes, int only_objectness, int *map, float tree_thresh, float thresh_hand)$/;"	f
get_regression_values	classifier.c	/^float *get_regression_values(char **labels, int n)$/;"	f
get_rnn_data	rnn.c	/^float_pair get_rnn_data(unsigned char *text, size_t *offsets, int characters, size_t len, int batch, int steps)$/;"	f
get_rnn_token_data	rnn.c	/^float_pair get_rnn_token_data(int *tokens, size_t *offsets, int characters, size_t len, int batch, int steps)$/;"	f
get_rnn_vid_data	rnn_vid.c	/^float_pair get_rnn_vid_data(network net, char **files, int n, int batch, int steps)$/;"	f
get_wall_time	demo.c	/^double get_wall_time()$/;"	f
get_weights	convolutional_layer.c	/^image *get_weights(convolutional_layer l)$/;"	f
get_workspace_size	convolutional_layer.c	/^size_t get_workspace_size(layer l){$/;"	f
gpu_index	cuda.c	/^int gpu_index = 0;$/;"	v
gradient	activations.c	/^float gradient(float x, ACTIVATION a)$/;"	f
gradient_array	activations.c	/^void gradient_array(const float *x, const int n, const ACTIVATION a, float *delta)$/;"	f
grayscale_image	image.c	/^image grayscale_image(image im)$/;"	f
gun_classifier	classifier.c	/^void gun_classifier(char *datacfg, char *cfgfile, char *weightfile, int cam_index, const char *filename)$/;"	f
h	parser.c	/^    int h;$/;"	m	struct:size_params	file:
hierarchy_predictions	tree.c	/^void hierarchy_predictions(float *predictions, int n, tree *hier, int only_leaves)$/;"	f
hierarchy_top_prediction	tree.c	/^int hierarchy_top_prediction(float *predictions, tree *hier, float thresh)$/;"	f
hold_out_matrix	matrix.c	/^matrix hold_out_matrix(matrix *m, int n)$/;"	f
hsv_to_rgb	image.c	/^void hsv_to_rgb(image im)$/;"	f
hue_image	image.c	/^void hue_image(image im, float hue)$/;"	f
im2col_cpu	im2col.c	/^void im2col_cpu(float* data_im,$/;"	f
im2col_get_pixel	im2col.c	/^float im2col_get_pixel(float *im, int height, int width, int channels,$/;"	f
image_distance	image.c	/^image image_distance(image a, image b)$/;"	f
images	base.c	/^static image images[FRAMES];$/;"	v	file:
images	demo.c	/^static image images[FRAMES];$/;"	v	file:
in	demo.c	/^static image in   ;$/;"	v	file:
in_s	demo.c	/^static image in_s ;$/;"	v	file:
increment_layer	crnn_layer.c	/^static void increment_layer(layer *l, int steps)$/;"	f	file:
increment_layer	gru_layer.c	/^static void increment_layer(layer *l, int steps)$/;"	f	file:
increment_layer	rnn_layer.c	/^static void increment_layer(layer *l, int steps)$/;"	f	file:
index	box.c	/^    int index;$/;"	m	struct:__anon3	file:
index	parser.c	/^    int index;$/;"	m	struct:size_params	file:
init_device	base.c	/^static int init_device (peye mdata, int cam_idx)$/;"	f	file:
inputs	parser.c	/^    int inputs;$/;"	m	struct:size_params	file:
int_to_alphanum	utils.c	/^char int_to_alphanum(int i)$/;"	f
inverted	go.c	/^int inverted = 1;$/;"	v
ipl_to_image	image.c	/^image ipl_to_image(IplImage* src)$/;"	f
is_network	parser.c	/^int is_network(section *s)$/;"	f
l2_cpu	blas.c	/^void l2_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
label_classifier	classifier.c	/^void label_classifier(char *datacfg, char *filename, char *weightfile)$/;"	f
lable_names	base.c	/^static char *lable_names[] = {"head", "bicycle", "bird", "hand", "bottle", "bus", "car", "cat", "chair", "cow", "diningtable", "dog", "horse", "motorbike", "person", "pottedplant", "sheep", "sofa", "train", "tvmonitor"};$/;"	v	file:
legal_go	go.c	/^int legal_go(float *b, char *ko, int p, int r, int c)$/;"	f
list_insert	list.c	/^void list_insert(list *l, void *val)$/;"	f
list_pop	list.c	/^void *list_pop(list *l){$/;"	f
list_to_array	list.c	/^void **list_to_array(list *l)$/;"	f
load_all_cifar10	data.c	/^data load_all_cifar10()$/;"	f
load_alphabet	image.c	/^image **load_alphabet()$/;"	f
load_batchnorm_weights	parser.c	/^void load_batchnorm_weights(layer l, FILE *fp)$/;"	f
load_categorical_data_csv	data.c	/^data load_categorical_data_csv(char *filename, int target, int k)$/;"	f
load_cifar10_data	data.c	/^data load_cifar10_data(char *filename)$/;"	f
load_connected_weights	parser.c	/^void load_connected_weights(layer l, FILE *fp, int transpose)$/;"	f
load_convolutional_weights	parser.c	/^void load_convolutional_weights(layer l, FILE *fp)$/;"	f
load_convolutional_weights_binary	parser.c	/^void load_convolutional_weights_binary(layer l, FILE *fp)$/;"	f
load_data	data.c	/^pthread_t load_data(load_args args)$/;"	f
load_data_augment	data.c	/^data load_data_augment(char **paths, int n, int m, char **labels, int k, tree *hierarchy, int min, int max, int size, float angle, float aspect, float hue, float saturation, float exposure)$/;"	f
load_data_captcha	data.c	/^data load_data_captcha(char **paths, int n, int m, int k, int w, int h)$/;"	f
load_data_captcha_encode	data.c	/^data load_data_captcha_encode(char **paths, int n, int m, int w, int h)$/;"	f
load_data_compare	data.c	/^data load_data_compare(int n, char **paths, int m, int classes, int w, int h)$/;"	f
load_data_detection	data.c	/^data load_data_detection(int n, char **paths, int m, int w, int h, int boxes, int classes, float jitter, float hue, float saturation, float exposure)$/;"	f
load_data_in_thread	data.c	/^pthread_t load_data_in_thread(load_args args)$/;"	f
load_data_old	data.c	/^data load_data_old(char **paths, int n, int m, char **labels, int k, int w, int h)$/;"	f
load_data_region	data.c	/^data load_data_region(int n, char **paths, int m, int w, int h, int size, int classes, float jitter, float hue, float saturation, float exposure)$/;"	f
load_data_super	data.c	/^data load_data_super(char **paths, int n, int m, int w, int h, int scale)$/;"	f
load_data_swag	data.c	/^data load_data_swag(char **paths, int n, int classes, float jitter)$/;"	f
load_data_tag	data.c	/^data load_data_tag(char **paths, int n, int m, int k, int min, int max, int size, float angle, float aspect, float hue, float saturation, float exposure)$/;"	f
load_data_writing	data.c	/^data load_data_writing(char **paths, int n, int m, int w, int h, int out_w, int out_h)$/;"	f
load_go	data.c	/^data load_go(char *filename)$/;"	f
load_go_moves	go.c	/^moves load_go_moves(char *filename)$/;"	f
load_image	image.c	/^image load_image(char *filename, int w, int h, int c)$/;"	f
load_image_augment_paths	data.c	/^matrix load_image_augment_paths(char **paths, int n, int min, int max, int size, float angle, float aspect, float hue, float saturation, float exposure)$/;"	f
load_image_color	image.c	/^image load_image_color(char *filename, int w, int h)$/;"	f
load_image_cv	image.c	/^image load_image_cv(char *filename, int channels)$/;"	f
load_image_paths	data.c	/^matrix load_image_paths(char **paths, int n, int w, int h)$/;"	f
load_image_paths_gray	data.c	/^matrix load_image_paths_gray(char **paths, int n, int w, int h)$/;"	f
load_image_stb	image.c	/^image load_image_stb(char *filename, int channels)$/;"	f
load_labels_paths	data.c	/^matrix load_labels_paths(char **paths, int n, char **labels, int k, tree *hierarchy)$/;"	f
load_tags_paths	data.c	/^matrix load_tags_paths(char **paths, int n, int k)$/;"	f
load_thread	data.c	/^void *load_thread(void *ptr)$/;"	f
load_threads	data.c	/^void *load_threads(void *ptr)$/;"	f
load_weights	parser.c	/^void load_weights(network *net, char *filename)$/;"	f
load_weights_upto	parser.c	/^void load_weights_upto(network *net, char *filename, int cutoff)$/;"	f
local_out_height	local_layer.c	/^int local_out_height(local_layer l)$/;"	f
local_out_width	local_layer.c	/^int local_out_width(local_layer l)$/;"	f
logit	region_layer.c	/^float logit(float x)$/;"	f
mag_array	utils.c	/^float mag_array(float *a, int n)$/;"	f
make_activation_layer	activation_layer.c	/^layer make_activation_layer(int batch, int inputs, ACTIVATION activation)$/;"	f
make_avgpool_layer	avgpool_layer.c	/^avgpool_layer make_avgpool_layer(int batch, int w, int h, int c)$/;"	f
make_batchnorm_layer	batchnorm_layer.c	/^layer make_batchnorm_layer(int batch, int w, int h, int c)$/;"	f
make_connected_layer	connected_layer.c	/^connected_layer make_connected_layer(int batch, int inputs, int outputs, ACTIVATION activation, int batch_normalize)$/;"	f
make_convolutional_layer	convolutional_layer.c	/^convolutional_layer make_convolutional_layer(int batch, int h, int w, int c, int n, int size, int stride, int padding, ACTIVATION activation, int batch_normalize, int binary, int xnor, int adam)$/;"	f
make_cost_layer	cost_layer.c	/^cost_layer make_cost_layer(int batch, int inputs, COST_TYPE cost_type, float scale)$/;"	f
make_crnn_layer	crnn_layer.c	/^layer make_crnn_layer(int batch, int h, int w, int c, int hidden_filters, int output_filters, int steps, ACTIVATION activation, int batch_normalize)$/;"	f
make_crop_layer	crop_layer.c	/^crop_layer make_crop_layer(int batch, int h, int w, int c, int crop_height, int crop_width, int flip, float angle, float saturation, float exposure)$/;"	f
make_deconvolutional_layer	deconvolutional_layer.c	/^deconvolutional_layer make_deconvolutional_layer(int batch, int h, int w, int c, int n, int size, int stride, ACTIVATION activation)$/;"	f
make_detection_layer	detection_layer.c	/^detection_layer make_detection_layer(int batch, int inputs, int n, int side, int classes, int coords, int rescore)$/;"	f
make_dropout_layer	dropout_layer.c	/^dropout_layer make_dropout_layer(int batch, int inputs, float probability)$/;"	f
make_empty_image	image.c	/^image make_empty_image(int w, int h, int c)$/;"	f
make_gru_layer	gru_layer.c	/^layer make_gru_layer(int batch, int inputs, int outputs, int steps, int batch_normalize)$/;"	f
make_image	image.c	/^image make_image(int w, int h, int c)$/;"	f
make_list	list.c	/^list *make_list()$/;"	f
make_local_layer	local_layer.c	/^local_layer make_local_layer(int batch, int h, int w, int c, int n, int size, int stride, int pad, ACTIVATION activation)$/;"	f
make_matrix	matrix.c	/^matrix make_matrix(int rows, int cols)$/;"	f
make_maxpool_layer	maxpool_layer.c	/^maxpool_layer make_maxpool_layer(int batch, int h, int w, int c, int size, int stride, int padding)$/;"	f
make_network	network.c	/^network make_network(int n)$/;"	f
make_normalization_layer	normalization_layer.c	/^layer make_normalization_layer(int batch, int w, int h, int c, int size, float alpha, float beta, float kappa)$/;"	f
make_random_image	image.c	/^image make_random_image(int w, int h, int c)$/;"	f
make_region_layer	region_layer.c	/^layer make_region_layer(int batch, int w, int h, int n, int classes, int coords)$/;"	f
make_reorg_layer	reorg_layer.c	/^layer make_reorg_layer(int batch, int w, int h, int c, int stride, int reverse)$/;"	f
make_rnn_layer	rnn_layer.c	/^layer make_rnn_layer(int batch, int inputs, int hidden, int outputs, int steps, ACTIVATION activation, int batch_normalize, int log)$/;"	f
make_route_layer	route_layer.c	/^route_layer make_route_layer(int batch, int n, int *input_layers, int *input_sizes)$/;"	f
make_shortcut_layer	shortcut_layer.c	/^layer make_shortcut_layer(int batch, int index, int w, int h, int c, int w2, int h2, int c2)$/;"	f
make_softmax_layer	softmax_layer.c	/^softmax_layer make_softmax_layer(int batch, int inputs, int groups)$/;"	f
makes_safe_go	go.c	/^int makes_safe_go(float *b, int *lib, int p, int r, int c){$/;"	f
malloc_error	utils.c	/^void malloc_error()$/;"	f
matrix_add_matrix	matrix.c	/^void matrix_add_matrix(matrix from, matrix to)$/;"	f
matrix_to_csv	matrix.c	/^void matrix_to_csv(matrix m)$/;"	f
matrix_topk_accuracy	matrix.c	/^float matrix_topk_accuracy(matrix truth, matrix guess, int k)$/;"	f
max_index	utils.c	/^int max_index(float *a, int n)$/;"	f
mean_array	utils.c	/^float mean_array(float *a, int n)$/;"	f
mean_arrays	utils.c	/^void mean_arrays(float **a, int n, int els, float *avg)$/;"	f
mean_cpu	blas.c	/^void mean_cpu(float *x, int batch, int filters, int spatial, float *mean)$/;"	f
mean_delta_cpu	batchnorm_layer.c	/^void mean_delta_cpu(float *delta, float *variance, int batch, int filters, int spatial, float *mean_delta)$/;"	f
method_arg_func	dbus.c	/^int method_arg_func(DBusMessage *msg, void *param) {$/;"	f
method_call	dbus.c	/^int method_call(DBusConnection *connection, $/;"	f
move_go	go.c	/^void move_go(float *b, int p, int r, int c)$/;"	f
moves	go.c	/^} moves;$/;"	t	typeref:struct:__anon5	file:
mse_array	utils.c	/^float mse_array(float *a, int n)$/;"	f
mul_cpu	blas.c	/^void mul_cpu(int N, float *X, int INCX, float *Y, int INCY)$/;"	f
mutex	data.c	/^pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
n	go.c	/^    int n;$/;"	m	struct:__anon5	file:
net	compare.c	/^    network net;$/;"	m	struct:__anon2	file:
net	demo.c	/^static network net;$/;"	v	file:
net	parser.c	/^    network net;$/;"	m	struct:size_params	file:
net	robot.c	/^static network net;$/;"	v	file:
net	robot1.c	/^static network net;$/;"	v	file:
network_accuracies	network.c	/^float *network_accuracies(network net, data d, int n)$/;"	f
network_accuracy	network.c	/^float network_accuracy(network net, data d)$/;"	f
network_accuracy_multi	network.c	/^float network_accuracy_multi(network net, data d, int n)$/;"	f
network_predict	network.c	/^float *network_predict(network net, float *input)$/;"	f
network_predict_data	network.c	/^matrix network_predict_data(network net, data test)$/;"	f
network_predict_data_multi	network.c	/^matrix network_predict_data_multi(network net, data test, int n)$/;"	f
nind	go.c	/^static const int nind = 5;$/;"	v	file:
nms_comparator	box.c	/^int nms_comparator(const void *pa, const void *pb)$/;"	f
noi	go.c	/^int noi = 1;$/;"	v
normalize_array	utils.c	/^void normalize_array(float *a, int n)$/;"	f
normalize_cpu	blas.c	/^void normalize_cpu(float *x, float *mean, float *variance, int batch, int filters, int spatial)$/;"	f
normalize_data_rows	data.c	/^void normalize_data_rows(data d)$/;"	f
normalize_delta_cpu	batchnorm_layer.c	/^void normalize_delta_cpu(float *x, float *mean, float *variance, float *mean_delta, float *variance_delta, int batch, int filters, int spatial, float *delta)$/;"	f
normalize_image	image.c	/^void normalize_image(image p)$/;"	f
normalize_image2	image.c	/^void normalize_image2(image p)$/;"	f
normalize_layer	eye_c.c	/^layer normalize_layer(layer l, int n)$/;"	f
normalize_net	eye_c.c	/^void normalize_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f
object_detect_init	robot.c	/^pmnet object_detect_init(int cam_idx)$/;"	f
object_detect_init	robot1.c	/^pmnet object_detect_init(int cam_idx)$/;"	f
object_detect_run	robot.c	/^int object_detect_run(pmnet mdata,  float *buf)$/;"	f
object_detect_run	robot1.c	/^int object_detect_run(pmnet mdata,  float *buf)$/;"	f
one_hot_encode	utils.c	/^float **one_hot_encode(float *a, int n, int k)$/;"	f
oneoff	eye_c.c	/^void oneoff(char *cfgfile, char *weightfile, char *outfile)$/;"	f
operations	eye_c.c	/^void operations(char *cfgfile)$/;"	f
optimize_picture	nightmare.c	/^void optimize_picture(network *net, image orig, int max_layer, float scale, float rate, float thresh, int norm)$/;"	f
option_find	option_list.c	/^char *option_find(list *l, char *key)$/;"	f
option_find_float	option_list.c	/^float option_find_float(list *l, char *key, float def)$/;"	f
option_find_float_quiet	option_list.c	/^float option_find_float_quiet(list *l, char *key, float def)$/;"	f
option_find_int	option_list.c	/^int option_find_int(list *l, char *key, int def)$/;"	f
option_find_int_quiet	option_list.c	/^int option_find_int_quiet(list *l, char *key, int def)$/;"	f
option_find_str	option_list.c	/^char *option_find_str(list *l, char *key, char *def)$/;"	f
option_insert	option_list.c	/^void option_insert(list *l, char *key, char *val)$/;"	f
option_unused	option_list.c	/^void option_unused(list *l)$/;"	f
options	parser.c	/^    list *options;$/;"	m	struct:__anon1	file:
overlap	box.c	/^float overlap(float x1, float w1, float x2, float w2)$/;"	f
parse_activation	parser.c	/^layer parse_activation(list *options, size_params params)$/;"	f
parse_avgpool	parser.c	/^avgpool_layer parse_avgpool(list *options, size_params params)$/;"	f
parse_batchnorm	parser.c	/^layer parse_batchnorm(list *options, size_params params)$/;"	f
parse_connected	parser.c	/^connected_layer parse_connected(list *options, size_params params)$/;"	f
parse_convolutional	parser.c	/^convolutional_layer parse_convolutional(list *options, size_params params)$/;"	f
parse_cost	parser.c	/^cost_layer parse_cost(list *options, size_params params)$/;"	f
parse_crnn	parser.c	/^layer parse_crnn(list *options, size_params params)$/;"	f
parse_crop	parser.c	/^crop_layer parse_crop(list *options, size_params params)$/;"	f
parse_csv_line	utils.c	/^list *parse_csv_line(char *line)$/;"	f
parse_data	parser.c	/^void parse_data(char *data, float *a, int n)$/;"	f
parse_detection	parser.c	/^detection_layer parse_detection(list *options, size_params params)$/;"	f
parse_dropout	parser.c	/^dropout_layer parse_dropout(list *options, size_params params)$/;"	f
parse_fields	utils.c	/^float *parse_fields(char *line, int n)$/;"	f
parse_gru	parser.c	/^layer parse_gru(list *options, size_params params)$/;"	f
parse_local	parser.c	/^local_layer parse_local(list *options, size_params params)$/;"	f
parse_maxpool	parser.c	/^maxpool_layer parse_maxpool(list *options, size_params params)$/;"	f
parse_net_options	parser.c	/^void parse_net_options(list *options, network *net)$/;"	f
parse_network_cfg	parser.c	/^network parse_network_cfg(char *filename)$/;"	f
parse_normalization	parser.c	/^layer parse_normalization(list *options, size_params params)$/;"	f
parse_region	parser.c	/^layer parse_region(list *options, size_params params)$/;"	f
parse_reorg	parser.c	/^layer parse_reorg(list *options, size_params params)$/;"	f
parse_rnn	parser.c	/^layer parse_rnn(list *options, size_params params)$/;"	f
parse_route	parser.c	/^route_layer parse_route(list *options, size_params params, network net)$/;"	f
parse_shortcut	parser.c	/^layer parse_shortcut(list *options, size_params params, network net)$/;"	f
parse_softmax	parser.c	/^softmax_layer parse_softmax(list *options, size_params params)$/;"	f
partial	eye_c.c	/^void partial(char *cfgfile, char *weightfile, char *outfile, int max)$/;"	f
pipe_init	pipe_service.c	/^static int pipe_init(const char *path, int mode) {$/;"	f	file:
pm	utils.c	/^void pm(int M, int N, float *A)$/;"	f
pop_column	matrix.c	/^float *pop_column(matrix *m, int c)$/;"	f
pow_cpu	blas.c	/^void pow_cpu(int N, float ALPHA, float *X, int INCX, float *Y, int INCY)$/;"	f
predict_classifier	classifier.c	/^void predict_classifier(char *datacfg, char *cfgfile, char *weightfile, char *filename, int top)$/;"	f
predict_move	go.c	/^void predict_move(network net, float *board, float *move, int multi)$/;"	f
predictions	base.c	/^static float *predictions[FRAMES];$/;"	v	file:
predictions	demo.c	/^static float *predictions[FRAMES];$/;"	v	file:
print_board	go.c	/^void print_board(float *board, int swap, int *indexes)$/;"	f
print_cocos	coco.c	/^void print_cocos(FILE *fp, int image_id, box *boxes, float **probs, int num_boxes, int classes, int w, int h)$/;"	f
print_cocos	detector.c	/^static void print_cocos(FILE *fp, char *image_path, box *boxes, float **probs, int num_boxes, int classes, int w, int h)$/;"	f	file:
print_detector_detections	detector.c	/^void print_detector_detections(FILE **fps, char *id, box *boxes, float **probs, int total, int classes, int w, int h)$/;"	f
print_image	image.c	/^void print_image(image m)$/;"	f
print_imagenet_detections	detector.c	/^void print_imagenet_detections(FILE *fp, int id, box *boxes, float **probs, int total, int classes, int w, int h)$/;"	f
print_letters	data.c	/^void print_letters(float *pred, int n)$/;"	f
print_matrix	matrix.c	/^void print_matrix(matrix m)$/;"	f
print_network	network.c	/^void print_network(network net)$/;"	f
print_statistics	utils.c	/^void print_statistics(float *a, int n)$/;"	f
print_symbol	rnn.c	/^void print_symbol(int n, char **tokens){$/;"	f
print_yolo_detections	yolo.c	/^void print_yolo_detections(FILE **fps, char *id, box *boxes, float **probs, int total, int classes, int w, int h)$/;"	f
probs	box.c	/^    float **probs;$/;"	m	struct:__anon3	file:
probs	demo.c	/^static float **probs;$/;"	v	file:
probs	robot.c	/^static float **probs;$/;"	v	file:
probs	robot1.c	/^static float **probs;$/;"	v	file:
propagate_liberty	go.c	/^void propagate_liberty(float *board, int *lib, int *visited, int row, int col, int side)$/;"	f
pull_batchnorm_layer	batchnorm_layer.c	/^void pull_batchnorm_layer(layer l)$/;"	f
pull_connected_layer	connected_layer.c	/^void pull_connected_layer(connected_layer l)$/;"	f
pull_cost_layer	cost_layer.c	/^void pull_cost_layer(cost_layer l)$/;"	f
pull_crnn_layer	crnn_layer.c	/^void pull_crnn_layer(layer l)$/;"	f
pull_gru_layer	gru_layer.c	/^void pull_gru_layer(layer l)$/;"	f
pull_local_layer	local_layer.c	/^void pull_local_layer(local_layer l)$/;"	f
pull_rnn_layer	rnn_layer.c	/^void pull_rnn_layer(layer l)$/;"	f
pull_softmax_layer_output	softmax_layer.c	/^void pull_softmax_layer_output(const softmax_layer layer)$/;"	f
push_batchnorm_layer	batchnorm_layer.c	/^void push_batchnorm_layer(layer l)$/;"	f
push_connected_layer	connected_layer.c	/^void push_connected_layer(connected_layer l)$/;"	f
push_cost_layer	cost_layer.c	/^void push_cost_layer(cost_layer l)$/;"	f
push_crnn_layer	crnn_layer.c	/^void push_crnn_layer(layer l)$/;"	f
push_gru_layer	gru_layer.c	/^void push_gru_layer(layer l)$/;"	f
push_local_layer	local_layer.c	/^void push_local_layer(local_layer l)$/;"	f
push_rnn_layer	rnn_layer.c	/^void push_rnn_layer(layer l)$/;"	f
putBufferIdx	base.c	/^void putBufferIdx(peye mdata, int* index, int idx)$/;"	f
put_buffer	base.c	/^static int put_buffer(peye mdata, struct v4l2_buffer *qbuf, int cam_idx)$/;"	f	file:
rand_int	utils.c	/^int rand_int(int min, int max)$/;"	f
rand_normal	utils.c	/^float rand_normal()$/;"	f
rand_scale	utils.c	/^float rand_scale(float s)$/;"	f
rand_size_t	utils.c	/^size_t rand_size_t()$/;"	f
rand_uniform	utils.c	/^float rand_uniform(float min, float max)$/;"	f
random_augment_image	image.c	/^image random_augment_image(image im, float angle, float aspect, int low, int high, int size)$/;"	f
random_crop_image	image.c	/^image random_crop_image(image im, int w, int h)$/;"	f
random_distort_image	image.c	/^void random_distort_image(image im, float hue, float saturation, float exposure)$/;"	f
random_go_moves	go.c	/^void random_go_moves(moves m, float *boards, float *labels, int n)$/;"	f
random_matrix	gemm.c	/^float *random_matrix(int rows, int cols)$/;"	f
randomize_boxes	data.c	/^void randomize_boxes(box_label *b, int n)$/;"	f
randomize_data	data.c	/^void randomize_data(data d)$/;"	f
rbox	base.c	/^box *rbox;$/;"	v
read_all	utils.c	/^void read_all(int fd, char *buffer, size_t bytes)$/;"	f
read_all_fail	utils.c	/^int read_all_fail(int fd, char *buffer, size_t bytes)$/;"	f
read_boxes	data.c	/^box_label *read_boxes(char *filename, int *n)$/;"	f
read_cfg	parser.c	/^list *read_cfg(char *filename)$/;"	f
read_data_cfg	option_list.c	/^list *read_data_cfg(char *filename)$/;"	f
read_int	utils.c	/^int read_int(int fd)$/;"	f
read_map	utils.c	/^int *read_map(char *filename)$/;"	f
read_option	option_list.c	/^int read_option(char *s, list *options)$/;"	f
read_tokenized_data	rnn.c	/^int *read_tokenized_data(char *filename, size_t *read)$/;"	f
read_tokens	rnn.c	/^char **read_tokens(char *filename, size_t *read)$/;"	f
read_tree	tree.c	/^tree *read_tree(char *filename)$/;"	f
reconstruct_picture	nightmare.c	/^void reconstruct_picture(network net, float *features, image recon, image update, float rate, float momentum, float lambda, int smooth_size, int iters)$/;"	f
remove_connected	go.c	/^void remove_connected(float *b, int *lib, int p, int r, int c)$/;"	f
reorg_cpu	blas.c	/^void reorg_cpu(float *x, int w, int h, int c, int batch, int stride, int forward, float *out)$/;"	f
rescale_net	eye_c.c	/^void rescale_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f
rescale_weights	convolutional_layer.c	/^void rescale_weights(convolutional_layer l, float scale, float trans)$/;"	f
reset_momentum	network.c	/^void reset_momentum(network net)$/;"	f
reset_normalize_net	eye_c.c	/^void reset_normalize_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f
reset_rnn_state	rnn.c	/^void reset_rnn_state(network net, int b)$/;"	f
resize_avgpool_layer	avgpool_layer.c	/^void resize_avgpool_layer(avgpool_layer *l, int w, int h)$/;"	f
resize_batchnorm_layer	batchnorm_layer.c	/^void resize_batchnorm_layer(layer *layer, int w, int h)$/;"	f
resize_convolutional_layer	convolutional_layer.c	/^void resize_convolutional_layer(convolutional_layer *l, int w, int h)$/;"	f
resize_cost_layer	cost_layer.c	/^void resize_cost_layer(cost_layer *l, int inputs)$/;"	f
resize_crop_layer	crop_layer.c	/^void resize_crop_layer(layer *l, int w, int h)$/;"	f
resize_deconvolutional_layer	deconvolutional_layer.c	/^void resize_deconvolutional_layer(deconvolutional_layer *l, int h, int w)$/;"	f
resize_dropout_layer	dropout_layer.c	/^void resize_dropout_layer(dropout_layer *l, int inputs)$/;"	f
resize_image	image.c	/^image resize_image(image im, int w, int h)$/;"	f
resize_matrix	matrix.c	/^matrix resize_matrix(matrix m, int size)$/;"	f
resize_max	image.c	/^image resize_max(image im, int max)$/;"	f
resize_maxpool_layer	maxpool_layer.c	/^void resize_maxpool_layer(maxpool_layer *l, int w, int h)$/;"	f
resize_min	image.c	/^image resize_min(image im, int min)$/;"	f
resize_network	network.c	/^int resize_network(network *net, int w, int h)$/;"	f
resize_normalization_layer	normalization_layer.c	/^void resize_normalization_layer(layer *layer, int w, int h)$/;"	f
resize_region_layer	region_layer.c	/^void resize_region_layer(layer *l, int w, int h)$/;"	f
resize_reorg_layer	reorg_layer.c	/^void resize_reorg_layer(layer *l, int w, int h)$/;"	f
resize_route_layer	route_layer.c	/^void resize_route_layer(route_layer *l, network *net)$/;"	f
rgb_to_hsv	image.c	/^void rgb_to_hsv(image im)$/;"	f
rgbgr_image	image.c	/^void rgbgr_image(image im)$/;"	f
rgbgr_net	eye_c.c	/^void rgbgr_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f
rgbgr_weights	convolutional_layer.c	/^void rgbgr_weights(convolutional_layer l)$/;"	f
rotate_crop_image	image.c	/^image rotate_crop_image(image im, float rad, float s, int w, int h, float dx, float dy, float aspect)$/;"	f
rotate_image	image.c	/^image rotate_image(image im, float rad)$/;"	f
rotate_image_cw	image.c	/^void rotate_image_cw(image im, int times)$/;"	f
run_art	art.c	/^void run_art(int argc, char **argv)$/;"	f
run_captcha	captcha.c	/^void run_captcha(int argc, char **argv)$/;"	f
run_char_rnn	rnn.c	/^void run_char_rnn(int argc, char **argv)$/;"	f
run_cifar	cifar.c	/^void run_cifar(int argc, char **argv)$/;"	f
run_classifier	classifier.c	/^void run_classifier(int argc, char **argv)$/;"	f
run_coco	coco.c	/^void run_coco(int argc, char **argv)$/;"	f
run_compare	compare.c	/^void run_compare(int argc, char **argv)$/;"	f
run_detector	detector.c	/^void run_detector(int argc, char **argv)$/;"	f
run_dice	dice.c	/^void run_dice(int argc, char **argv)$/;"	f
run_go	go.c	/^void run_go(int argc, char **argv)$/;"	f
run_nightmare	nightmare.c	/^void run_nightmare(int argc, char **argv)$/;"	f
run_super	super.c	/^void run_super(int argc, char **argv)$/;"	f
run_swag	swag.c	/^void run_swag(int argc, char **argv)$/;"	f
run_tag	tag.c	/^void run_tag(int argc, char **argv)$/;"	f
run_vid_rnn	rnn_vid.c	/^void run_vid_rnn(int argc, char **argv)$/;"	f
run_vid_rnn	rnn_vid.c	/^void run_vid_rnn(int argc, char **argv){}$/;"	f
run_voxel	voxel.c	/^void run_voxel(int argc, char **argv)$/;"	f
run_writing	writing.c	/^void run_writing(int argc, char **argv)$/;"	f
run_yolo	yolo.c	/^void run_yolo(int argc, char **argv)$/;"	f
sample_array	utils.c	/^int sample_array(float *a, int n)$/;"	f
saturate_exposure_image	image.c	/^void saturate_exposure_image(image im, float sat, float exposure)$/;"	f
saturate_image	image.c	/^void saturate_image(image im, float sat)$/;"	f
save_batchnorm_weights	parser.c	/^void save_batchnorm_weights(layer l, FILE *fp)$/;"	f
save_connected_weights	parser.c	/^void save_connected_weights(layer l, FILE *fp)$/;"	f
save_convolutional_weights	parser.c	/^void save_convolutional_weights(layer l, FILE *fp)$/;"	f
save_convolutional_weights_binary	parser.c	/^void save_convolutional_weights_binary(layer l, FILE *fp)$/;"	f
save_image	image.c	/^void save_image(image im, const char *name)$/;"	f
save_image_jpg	image.c	/^void save_image_jpg(image p, const char *name)$/;"	f
save_image_png	image.c	/^void save_image_png(image im, const char *name)$/;"	f
save_reconstruction	rnn_vid.c	/^image save_reconstruction(network net, image *init, float *feat, char *name, int i)$/;"	f
save_weights	parser.c	/^void save_weights(network net, char *filename)$/;"	f
save_weights_upto	parser.c	/^void save_weights_upto(network net, char *filename, int cutoff)$/;"	f
scal_cpu	blas.c	/^void scal_cpu(int N, float ALPHA, float *X, int INCX)$/;"	f
scale_array	utils.c	/^void scale_array(float *a, int n, float s)$/;"	f
scale_bias	convolutional_layer.c	/^void scale_bias(float *output, float *scales, int batch, int n, int size)$/;"	f
scale_data_rows	data.c	/^void scale_data_rows(data d, float s)$/;"	f
scale_image	image.c	/^void scale_image(image m, float s)$/;"	f
scale_image_channel	image.c	/^void scale_image_channel(image im, int c, float v)$/;"	f
scale_matrix	matrix.c	/^void scale_matrix(matrix m, float scale)$/;"	f
score_game	go.c	/^float score_game(float *board)$/;"	f
sec	utils.c	/^float sec(clock_t clocks)$/;"	f
section	parser.c	/^}section;$/;"	t	typeref:struct:__anon1	file:
self_go	go.c	/^void self_go(char *filename, char *weightfile, char *f2, char *w2, int multi)$/;"	f
set_batch_network	network.c	/^void set_batch_network(network *net, int b)$/;"	f
set_pixel	image.c	/^void set_pixel(image m, int x, int y, int c, float val)$/;"	f
shortcut_cpu	blas.c	/^void shortcut_cpu(int batch, int w1, int h1, int c1, float *add, int w2, int h2, int c2, float *out)$/;"	f
show_image	image.c	/^void show_image(image p, const char *name)$/;"	f
show_image_collapsed	image.c	/^void show_image_collapsed(image p, char *name)$/;"	f
show_image_cv	image.c	/^void show_image_cv(image p, const char *name)$/;"	f
show_image_layers	image.c	/^void show_image_layers(image p, char *name)$/;"	f
show_image_normalized	image.c	/^void show_image_normalized(image im, const char *name)$/;"	f
show_images	image.c	/^void show_images(image *ims, int n, char *window)$/;"	f
shuffle	utils.c	/^void shuffle(void *arr, size_t n, size_t size)$/;"	f
size_params	parser.c	/^typedef struct size_params{$/;"	s	file:
size_params	parser.c	/^} size_params;$/;"	t	typeref:struct:size_params	file:
smooth	nightmare.c	/^void smooth(image recon, image update, float lambda, int num)$/;"	f
smooth_data	data.c	/^void smooth_data(data d)$/;"	f
smooth_l1_cpu	blas.c	/^void smooth_l1_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
softmax	blas.c	/^void softmax(float *input, int n, float temp, float *output)$/;"	f
softmax_tree	softmax_layer.c	/^void softmax_tree(float *input, int batch, int inputs, float temp, tree *hierarchy, float *output)$/;"	f
sorta_shuffle	utils.c	/^void sorta_shuffle(void *arr, size_t n, size_t size, size_t sections)$/;"	f
sortable_bbox	box.c	/^} sortable_bbox;$/;"	t	typeref:struct:__anon3	file:
sortable_bbox	compare.c	/^} sortable_bbox;$/;"	t	typeref:struct:__anon2	file:
speed	eye_c.c	/^void speed(char *cfgfile, int tics)$/;"	f
split_data	data.c	/^data *split_data(data d, int part, int total)$/;"	f
split_str	utils.c	/^list *split_str(char *s, char delim)$/;"	f
start_capturing	base.c	/^static void start_capturing(peye mdata, int cam_idx)$/;"	f	file:
statistics_connected_layer	connected_layer.c	/^void statistics_connected_layer(layer l)$/;"	f
statistics_net	eye_c.c	/^void statistics_net(char *cfgfile, char *weightfile)$/;"	f
string_to_board	go.c	/^void string_to_board(char *s, float *board)$/;"	f
string_to_layer_type	parser.c	/^LAYER_TYPE string_to_layer_type(char * type)$/;"	f
strip	utils.c	/^void strip(char *s)$/;"	f
strip_char	utils.c	/^void strip_char(char *s, char bad)$/;"	f
suicide_go	go.c	/^int suicide_go(float *b, int p, int r, int c)$/;"	f
sum_array	utils.c	/^float sum_array(float *a, int n)$/;"	f
swap_binary	convolutional_layer.c	/^void swap_binary(convolutional_layer *l)$/;"	f
test_box	box.c	/^void test_box()$/;"	f
test_captcha	captcha.c	/^void test_captcha(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_char_rnn	rnn.c	/^void test_char_rnn(char *cfgfile, char *weightfile, int num, char *seed, float temp, int rseed, char *token_file)$/;"	f
test_cifar	cifar.c	/^void test_cifar(char *filename, char *weightfile)$/;"	f
test_cifar_csv	cifar.c	/^void test_cifar_csv(char *filename, char *weightfile)$/;"	f
test_cifar_csvtrain	cifar.c	/^void test_cifar_csvtrain(char *filename, char *weightfile)$/;"	f
test_cifar_multi	cifar.c	/^void test_cifar_multi(char *filename, char *weightfile)$/;"	f
test_classifier	classifier.c	/^void test_classifier(char *datacfg, char *cfgfile, char *weightfile, int target_layer)$/;"	f
test_coco	coco.c	/^void test_coco(char *cfgfile, char *weightfile, char *filename, float thresh)$/;"	f
test_convolutional_layer	convolutional_layer.c	/^void test_convolutional_layer()$/;"	f
test_detector	detector.c	/^void test_detector(char *datacfg, char *cfgfile, char *weightfile, char *filename, float thresh, float hier_thresh)$/;"	f
test_dice	dice.c	/^void test_dice(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_dintersect	box.c	/^void test_dintersect()$/;"	f
test_dunion	box.c	/^void test_dunion()$/;"	f
test_go	go.c	/^void test_go(char *cfg, char *weights, int multi)$/;"	f
test_gpu_accuracy	gemm.c	/^void test_gpu_accuracy(int TA, int TB, int m, int k, int n)$/;"	f
test_gpu_blas	gemm.c	/^int test_gpu_blas()$/;"	f
test_resize	image.c	/^void test_resize(char *filename)$/;"	f
test_super	super.c	/^void test_super(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_tactic_rnn	rnn.c	/^void test_tactic_rnn(char *cfgfile, char *weightfile, int num, float temp, int rseed, char *token_file)$/;"	f
test_tag	tag.c	/^void test_tag(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_voxel	voxel.c	/^void test_voxel(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_writing	writing.c	/^void test_writing(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_yolo	yolo.c	/^void test_yolo(char *cfgfile, char *weightfile, char *filename, float thresh)$/;"	f
threat_classifier	classifier.c	/^void threat_classifier(char *datacfg, char *cfgfile, char *weightfile, int cam_index, const char *filename)$/;"	f
three_way_max	image.c	/^float three_way_max(float a, float b, float c)$/;"	f
three_way_min	image.c	/^float three_way_min(float a, float b, float c)$/;"	f
threshold_image	image.c	/^image threshold_image(image im, float thresh)$/;"	f
tile_images	image.c	/^image tile_images(image a, image b, int dx)$/;"	f
time_gpu_random_matrix	gemm.c	/^void time_gpu_random_matrix(int TA, int TB, int m, int k, int n)$/;"	f
time_ongpu	gemm.c	/^void time_ongpu(int TA, int TB, int m, int k, int n)$/;"	f
time_random_matrix	gemm.c	/^void time_random_matrix(int TA, int TB, int m, int k, int n)$/;"	f
time_steps	parser.c	/^    int time_steps;$/;"	m	struct:size_params	file:
tisnan	region_layer.c	/^float tisnan(float x)$/;"	f
top_k	utils.c	/^void top_k(float *a, int n, int k, int *index)$/;"	f
top_predictions	network.c	/^void top_predictions(network net, int k, int *index)$/;"	f
total_compares	compare.c	/^int total_compares = 0;$/;"	v
train_captcha	captcha.c	/^void train_captcha(char *cfgfile, char *weightfile)$/;"	f
train_char_rnn	rnn.c	/^void train_char_rnn(char *cfgfile, char *weightfile, char *filename, int clear, int tokenized)$/;"	f
train_cifar	cifar.c	/^void train_cifar(char *cfgfile, char *weightfile)$/;"	f
train_cifar_distill	cifar.c	/^void train_cifar_distill(char *cfgfile, char *weightfile)$/;"	f
train_classifier	classifier.c	/^void train_classifier(char *datacfg, char *cfgfile, char *weightfile, int *gpus, int ngpus, int clear)$/;"	f
train_coco	coco.c	/^void train_coco(char *cfgfile, char *weightfile)$/;"	f
train_compare	compare.c	/^void train_compare(char *cfgfile, char *weightfile)$/;"	f
train_detector	detector.c	/^void train_detector(char *datacfg, char *cfgfile, char *weightfile, int *gpus, int ngpus, int clear)$/;"	f
train_dice	dice.c	/^void train_dice(char *cfgfile, char *weightfile)$/;"	f
train_go	go.c	/^void train_go(char *cfgfile, char *weightfile)$/;"	f
train_network	network.c	/^float train_network(network net, data d)$/;"	f
train_network_batch	network.c	/^float train_network_batch(network net, data d, int n)$/;"	f
train_network_datum	network.c	/^float train_network_datum(network net, float *x, float *y)$/;"	f
train_network_sgd	network.c	/^float train_network_sgd(network net, data d, int n)$/;"	f
train_super	super.c	/^void train_super(char *cfgfile, char *weightfile)$/;"	f
train_swag	swag.c	/^void train_swag(char *cfgfile, char *weightfile)$/;"	f
train_tag	tag.c	/^void train_tag(char *cfgfile, char *weightfile, int clear)$/;"	f
train_vid_rnn	rnn_vid.c	/^void train_vid_rnn(char *cfgfile, char *weightfile)$/;"	f
train_voxel	voxel.c	/^void train_voxel(char *cfgfile, char *weightfile)$/;"	f
train_writing	writing.c	/^void train_writing(char *cfgfile, char *weightfile)$/;"	f
train_yolo	yolo.c	/^void train_yolo(char *cfgfile, char *weightfile)$/;"	f
translate_array	utils.c	/^void translate_array(float *a, int n, float s)$/;"	f
translate_data_rows	data.c	/^void translate_data_rows(data d, float s)$/;"	f
translate_image	image.c	/^void translate_image(image m, float s)$/;"	f
translate_image_channel	image.c	/^void translate_image_channel(image im, int c, float v)$/;"	f
transpose_image	image.c	/^void transpose_image(image im)$/;"	f
transpose_matrix	parser.c	/^void transpose_matrix(float *a, int rows, int cols)$/;"	f
try_classifier	classifier.c	/^void try_classifier(char *datacfg, char *cfgfile, char *weightfile, char *filename, int layer_num)$/;"	f
type	parser.c	/^    char *type;$/;"	m	struct:__anon1	file:
update_connected_layer	connected_layer.c	/^void update_connected_layer(connected_layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_connected_layer_gpu	connected_layer.c	/^void update_connected_layer_gpu(connected_layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_convolutional_layer	convolutional_layer.c	/^void update_convolutional_layer(convolutional_layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_crnn_layer	crnn_layer.c	/^void update_crnn_layer(layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_crnn_layer_gpu	crnn_layer.c	/^void update_crnn_layer_gpu(layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_deconvolutional_layer	deconvolutional_layer.c	/^void update_deconvolutional_layer(deconvolutional_layer l, float learning_rate, float momentum, float decay)$/;"	f
update_gru_layer	gru_layer.c	/^void update_gru_layer(layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_gru_layer_gpu	gru_layer.c	/^void update_gru_layer_gpu(layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_local_layer	local_layer.c	/^void update_local_layer(local_layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_local_layer_gpu	local_layer.c	/^void update_local_layer_gpu(local_layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_network	network.c	/^void update_network(network net)$/;"	f
update_rnn_layer	rnn_layer.c	/^void update_rnn_layer(layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_rnn_layer_gpu	rnn_layer.c	/^void update_rnn_layer_gpu(layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
v4l2_poll	base.c	/^int v4l2_poll(peye mdata, struct v4l2_buffer *qbuf, int cam_idx) {$/;"	f
valid_captcha	captcha.c	/^void valid_captcha(char *cfgfile, char *weightfile, char *filename)$/;"	f
valid_char_rnn	rnn.c	/^void valid_char_rnn(char *cfgfile, char *weightfile, char *seed)$/;"	f
valid_go	go.c	/^void valid_go(char *cfgfile, char *weightfile, int multi)$/;"	f
valid_tactic_rnn	rnn.c	/^void valid_tactic_rnn(char *cfgfile, char *weightfile, char *seed)$/;"	f
validate_classifier_10	classifier.c	/^void validate_classifier_10(char *datacfg, char *filename, char *weightfile)$/;"	f
validate_classifier_crop	classifier.c	/^void validate_classifier_crop(char *datacfg, char *filename, char *weightfile)$/;"	f
validate_classifier_full	classifier.c	/^void validate_classifier_full(char *datacfg, char *filename, char *weightfile)$/;"	f
validate_classifier_multi	classifier.c	/^void validate_classifier_multi(char *datacfg, char *filename, char *weightfile)$/;"	f
validate_classifier_single	classifier.c	/^void validate_classifier_single(char *datacfg, char *filename, char *weightfile)$/;"	f
validate_coco	coco.c	/^void validate_coco(char *cfgfile, char *weightfile)$/;"	f
validate_coco_recall	coco.c	/^void validate_coco_recall(char *cfgfile, char *weightfile)$/;"	f
validate_compare	compare.c	/^void validate_compare(char *filename, char *weightfile)$/;"	f
validate_detector	detector.c	/^void validate_detector(char *datacfg, char *cfgfile, char *weightfile, char *outfile)$/;"	f
validate_detector_recall	detector.c	/^void validate_detector_recall(char *cfgfile, char *weightfile)$/;"	f
validate_dice	dice.c	/^void validate_dice(char *filename, char *weightfile)$/;"	f
validate_yolo	yolo.c	/^void validate_yolo(char *cfgfile, char *weightfile)$/;"	f
validate_yolo_recall	yolo.c	/^void validate_yolo_recall(char *cfgfile, char *weightfile)$/;"	f
variance_array	utils.c	/^float variance_array(float *a, int n)$/;"	f
variance_cpu	blas.c	/^void variance_cpu(float *x, float *mean, int batch, int filters, int spatial, float *variance)$/;"	f
variance_delta_cpu	batchnorm_layer.c	/^void  variance_delta_cpu(float *x, float *delta, float *mean, float *variance, int batch, int filters, int spatial, float *variance_delta)$/;"	f
vec_char_rnn	rnn.c	/^void vec_char_rnn(char *cfgfile, char *weightfile, char *seed)$/;"	f
visualize	eye_c.c	/^void visualize(char *cfgfile, char *weightfile)$/;"	f
visualize_convolutional_layer	convolutional_layer.c	/^image *visualize_convolutional_layer(convolutional_layer l, char *window, image *prev_weights)$/;"	f
visualize_network	network.c	/^void visualize_network(network net)$/;"	f
voc_names	robot.c	/^static char *voc_names[] = {"head", "bicycle", "bird", "hand", "bottle", "bus", "car", "cat", "chair", "cow", "diningtable", "dog", "horse", "motorbike", "person", "pottedplant", "sheep", "sofa", "train", "tvmonitor"};$/;"	v	file:
voc_names	robot1.c	/^static char *voc_names[] = {"head", "bicycle", "bird", "hand", "bottle", "bus", "car", "cat", "chair", "cow", "diningtable", "dog", "horse", "motorbike", "person", "pottedplant", "sheep", "sofa", "train", "tvmonitor"};$/;"	v	file:
voc_names	yolo.c	/^char *voc_names[] = {"aeroplane", "bicycle", "bird", "boat", "bottle", "bus", "car", "cat", "chair", "cow", "diningtable", "dog", "horse", "motorbike", "person", "pottedplant", "sheep", "sofa", "train", "tvmonitor"};$/;"	v
w	parser.c	/^    int w;$/;"	m	struct:size_params	file:
weighted_sum_cpu	blas.c	/^void weighted_sum_cpu(float *a, float *b, float *s, int n, float *c)$/;"	f
windows	image.c	/^int windows = 0;$/;"	v
write_all	utils.c	/^void write_all(int fd, char *buffer, size_t bytes)$/;"	f
write_all_fail	utils.c	/^int write_all_fail(int fd, char *buffer, size_t bytes)$/;"	f
write_int	utils.c	/^void write_int(int fd, int n)$/;"	f
x	rnn.c	/^    float *x;$/;"	m	struct:__anon6	file:
x	rnn_vid.c	/^    float *x;$/;"	m	struct:__anon4	file:
y	rnn.c	/^    float *y;$/;"	m	struct:__anon6	file:
y	rnn_vid.c	/^    float *y;$/;"	m	struct:__anon4	file:
